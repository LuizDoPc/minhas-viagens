{"version":3,"sources":["components/SideDrawer/DrawerToggleButton.js","components/Toolbar/Toolbar.js","components/SideDrawer/SideDrawer.js","components/Backdrop/Backdrop.js","components/MapContainer/MapContainer.js","App.js","registerServiceWorker.js","index.js"],"names":["drawerToggleButton","props","react_default","a","createElement","className","onClick","click","toolbar","SideDrawer_DrawerToggleButton","drawerClickHandler","href","sideDrawer","drawerClasses","show","backdrop","Wrap","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","selectedPlace","activeMarker","showingInfoWindow","cities","onMarkerClick","marker","e","setState","onMapClicked","inherits","createClass","key","value","_geoCoding","asyncToGenerator","regenerator_default","mark","_callee2","city","wrap","_context2","prev","next","abrupt","Promise","_ref","_callee","resolve","reject","geocode","_context","fetch","sent","json","stop","_x2","_x3","_x","_this2","firebase","database","ref","once","then","snapshot","val","forEach","cidade","geoCoding","Nome","res","console","log","status","push","name","lat","results","geometry","location","lng","_this3","markers","dist","position","google","zoom","initialCenter","visible","Component","GoogleApiWrapper","apiKey","App","sideDrawerOpen","drawerToggleClickHandler","prevState","backdropClickHandler","initializeApp","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Backdrop_Backdrop","style","height","Toolbar_Toolbar","SideDrawer_SideDrawer","marginTop","MapContainer","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d6c67f28.chunk.js","sourcesContent":["import React from 'react';\n\nimport './DrawerToggleButton.css';\n\nconst drawerToggleButton = props => (\n    <button className=\"toggle-button\" onClick={props.click}>\n        <div className=\"toggle-button__line\" />\n        <div className=\"toggle-button__line\" />\n        <div className=\"toggle-button__line\" />\n    </button>\n);\n\nexport default drawerToggleButton;","import React from \"react\";\n\nimport DrawerToggleButton from \"../SideDrawer/DrawerToggleButton\";\nimport \"./Toolbar.css\";\n\nconst toolbar = props => (\n  <header className=\"toolbar\">\n    <nav className=\"toolbar__navigation\">\n      <div className=\"toolbar__toggle-button\">\n        <DrawerToggleButton click={props.drawerClickHandler} />\n      </div>\n      <div className=\"toolbar__logo\">\n        <a href=\"/\">Minhas Viagens</a>\n      </div>\n      <div className=\"spacer\" />\n      <div className=\"toolbar_navigation-items\">\n        <ul>\n          <li>\n            <a href=\"/\">Adicionar nova cidade</a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  </header>\n);\n\nexport default toolbar;\n","import React from \"react\";\n\nimport \"./SideDrawer.css\";\n\nconst sideDrawer = props => {\n  let drawerClasses = \"side-drawer\";\n  if (props.show) {\n    drawerClasses = \"side-drawer open\";\n  }\n  return (\n    <nav className={drawerClasses}>\n      <ul>\n        <li>\n          <a href=\"/\">Adicionar nova cidade</a>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default sideDrawer;\n","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop = props => (\n    <div className=\"backdrop\" onClick={props.click} />\n);\n\nexport default backdrop;","import React, { Component } from \"react\";\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from \"google-maps-react\";\nimport firebase from \"firebase\";\n\nexport class Wrap extends Component {\n  state = {\n    selectedPlace: \"\",\n    activeMarker: {},\n    showingInfoWindow: false,\n    cities: []\n  };\n\n  async geoCoding(city) {\n    return new Promise(async (resolve, reject) => {\n      let geocode = await fetch(\n        `https://maps.googleapis.com/maps/api/geocode/json?address=${city}&key=AIzaSyAxt-VCR6Hc3dCH8yt6hVpQwIub-vqQBMU`\n      );\n      geocode = geocode.json();\n      resolve(geocode);\n    });\n  }\n\n  componentWillMount() {\n    firebase\n      .database()\n      .ref(\"/Cidades\")\n      .once(\"value\")\n      .then(snapshot => {\n        let cities = [];\n        snapshot.val().forEach(cidade => {\n          this.geoCoding(cidade.Nome).then(res => {\n            console.log(res);\n            if (res.status === \"OK\") {\n              cities.push({\n                name: cidade.Nome,\n                lat: res.results[0].geometry.location.lat,\n                lng: res.results[0].geometry.location.lng\n              });\n            } else {\n              console.log(cidade);\n            }\n            this.setState({ cities });\n          });\n        });\n      });\n  }\n\n  onMarkerClick = (props, marker, e) => {\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n  };\n  onMapClicked = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  render() {\n    const markers = [];\n    this.state.cities.forEach(cidade => {\n      markers.push(\n        <Marker\n          key={cidade.lat + cidade.lng + cidade.name}\n          onClick={this.onMarkerClick}\n          name={cidade.name}\n          position={{\n            lat: cidade.lat,\n            lng: cidade.lng\n          }}\n        />\n      );\n    });\n\n    return (\n      <Map\n        google={this.props.google}\n        onClick={this.onMapClicked}\n        zoom={4.45}\n        initialCenter={{\n          lat: -14.5401117,\n          lng: -45.1187843\n        }}\n      >\n        {markers}\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n        >\n          <div>\n            <h1>{this.state.selectedPlace.name}</h1>\n          </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyAxt-VCR6Hc3dCH8yt6hVpQwIub-vqQBMU\"\n})(Wrap);\n","import React, { Component } from \"react\";\n\nimport Toolbar from \"./components/Toolbar/Toolbar\";\nimport SideDrawer from \"./components/SideDrawer/SideDrawer\";\nimport Backdrop from \"./components/Backdrop/Backdrop\";\nimport MapContainer from \"./components/MapContainer/MapContainer\";\n\nimport firebase from \"@firebase/app\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    var config = {\n      apiKey: \"AIzaSyCevUPMzUXYl9S63Zm6Wexy6CM0KSvgqp4\",\n      authDomain: \"appdaana-89bcc.firebaseapp.com\",\n      databaseURL: \"https://appdaana-89bcc.firebaseio.com\",\n      projectId: \"appdaana-89bcc\",\n      storageBucket: \"appdaana-89bcc.appspot.com\",\n      messagingSenderId: \"97719053670\"\n    };\n    firebase.initializeApp(config);\n  }\n\n  state = {\n    sideDrawerOpen: false\n  };\n\n  drawerToggleClickHandler = () => {\n    this.setState(prevState => {\n      return { sideDrawerOpen: !prevState.sideDrawerOpen };\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({ sideDrawerOpen: false });\n  };\n\n  render() {\n    let backdrop;\n\n    if (this.state.sideDrawerOpen) {\n      backdrop = <Backdrop click={this.backdropClickHandler} />;\n    }\n    return (\n      <div style={{ height: \"100%\" }}>\n        <Toolbar drawerClickHandler={this.drawerToggleClickHandler} />\n        <SideDrawer show={this.state.sideDrawerOpen} />\n        {backdrop}\n        <main style={{ marginTop: \"64px\" }}>\n          <MapContainer />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}